{"version":3,"file":"static/js/879.43d5f216.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/PostItem/PostItem.styled.js","components/PostDate/PostDate.jsx","components/PostItem/PostItem.jsx","components/PostsList/PostsList.styled.js","components/SkeletonPost/SkeletonPost.jsx","components/PostsList/PostsList.jsx","pages/Posts.jsx","components/ProfileDetails/ProfileDetails.styled.js","components/ProfileDetails/ProfileDetails.jsx","pages/Profile.jsx","utilities/dateParser.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const StyledSection = styled.section`\n  padding-top: 14px;\n  padding-bottom: 20px;\n`;\n\nexport const H1 = styled.h1`\n  margin-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { StyledSection, H1 } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <StyledSection>\n      {title && <H1>{title}</H1>}\n      <div>{children}</div>\n    </StyledSection>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n","import { styled } from 'styled-components';\nimport cssVar from 'utilities/cssVarGetter';\n\nconst mobilePd = cssVar('--mobile-padding');\nconst tabletPd = cssVar('--tablet-padding');\nconst desktopPd = cssVar('--desktop-padding');\n\nexport const UserName = styled.h2`\n  font-size: 1em;\n`;\n\nexport const Li = styled.li`\n  position: relative;\n  margin: 0 -${mobilePd};\n  padding: 10px ${mobilePd};\n  border-bottom: 1px solid gray;\n\n  &:last-child {\n    border: none;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 -${tabletPd};\n    padding: 20px ${tabletPd};\n  }\n\n  @media (min-width: 1280px) {\n    margin: 0 -${desktopPd};\n    padding: 30px ${desktopPd};\n  }\n`;\n\nexport const AvatarBox = styled.div`\n  min-height: 40px;\n  height: 40px;\n  min-width: 40px;\n  width: 40px;\n  border-radius: 50%;\n  overflow: hidden;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const MessageBox = styled.div`\n  padding: 5px;\n`;\n\nexport const Message = styled.p`\n  margin-bottom: 15px;\n`;\n\nexport const MessageImgBox = styled.div`\n  max-width: 480px;\n  max-height: 640px;\n  border-radius: 10%;\n  overflow: hidden;\n`;\n\nexport const MessageSplitter = styled.div`\n  display: flex;\n  gap: 12px;\n`;\n\nexport const MessageTitle = styled.div`\n  display: flex;\n  gap: 4px;\n  margin-bottom: 10px;\n`;\n","import DateParser from \"utilities/dateParser\";\n\nexport const PostDate = ({createdAt}) => {\n  const { day, month, hours, minutes } = DateParser(createdAt);\n\n  return (\n    <>\n      <p>\n        {month} {day}\n      </p>\n      <span>·</span>\n      <p>\n        {hours}:{minutes} UTC\n      </p>\n    </>\n  );\n};\n","import {\n  UserName,\n  AvatarBox,\n  Message,\n  MessageSplitter,\n  Img,\n  MessageBox,\n  MessageTitle,\n  MessageImgBox,\n  Li,\n} from './PostItem.styled';\nimport { PostDate } from 'components/PostDate/PostDate';\nimport { Link, useLocation } from 'react-router-dom';\nimport defaultPhoto from 'images/img_not_found.jpg';\n\nexport const PostItem = ({\n  postDetails: { author, avatar, image, message, createdAt },\n}) => {\n  const location = useLocation();\n  const accoutAvatar = avatar ? avatar : defaultPhoto;\n  const postImage = image ? image : defaultPhoto;\n\n  return (\n    <Li>\n      <MessageSplitter>\n        <AvatarBox>\n          <Img src={accoutAvatar} alt=\"profile\" width={'40'} height={'40'} />\n        </AvatarBox>\n        <div>\n          <MessageTitle>\n            <Link\n              to={`/profile/${author}`}\n              state={{ from: location }}\n            >\n              <UserName>{author}</UserName>\n            </Link>\n            <span>·</span>\n            <PostDate createdAt={createdAt} />\n          </MessageTitle>\n          <MessageBox>\n            <Message>{message}</Message>\n            <MessageImgBox>\n              <Img\n                src={postImage}\n                alt=\"post visualization\"\n                width={'480'}\n                height={'360'}\n              />\n            </MessageImgBox>\n          </MessageBox>\n        </div>\n      </MessageSplitter>\n    </Li>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n","import ContentLoader from 'react-content-loader';\nimport { Desktop, Mobile } from 'utilities/DeviceTypeDeterminant';\n\nconst SkeletonPost = props => (\n  <ContentLoader\n    speed={2}\n    width={480}\n    height={360}\n    viewBox=\"0 0 480 360\"\n    backgroundColor=\"#f3f3f3\"\n    foregroundColor=\"#ecebeb\"\n    {...props}\n  >\n    <Mobile>\n      <circle cx=\"20\" cy=\"20\" r=\"20\" />\n      <rect x=\"52\" y=\"0\" rx=\"0\" ry=\"0\" width=\"260\" height=\"16\" />\n      <rect x=\"52\" y=\"31\" rx=\"0\" ry=\"0\" width=\"300\" height=\"21\" />\n      <rect x=\"52\" y=\"93\" rx=\"0\" ry=\"0\" width=\"300\" height=\"360\" />\n      <rect x=\"52\" y=\"62\" rx=\"0\" ry=\"0\" width=\"300\" height=\"21\" />\n    </Mobile>\n    <Desktop>\n      <circle cx=\"20\" cy=\"20\" r=\"20\" />\n      <rect x=\"52\" y=\"0\" rx=\"0\" ry=\"0\" width=\"320\" height=\"16\" />\n      <rect x=\"52\" y=\"31\" rx=\"0\" ry=\"0\" width=\"480\" height=\"21\" />\n      <rect x=\"52\" y=\"93\" rx=\"0\" ry=\"0\" width=\"480\" height=\"360\" />\n      <rect x=\"52\" y=\"62\" rx=\"0\" ry=\"0\" width=\"480\" height=\"21\" />\n    </Desktop>\n  </ContentLoader>\n);\n\nexport default SkeletonPost;\n","import { PostItem } from 'components/PostItem/PostItem';\nimport { Ul } from './PostsList.styled';\nimport { Li } from '../PostItem/PostItem.styled';\nimport SkeletonPost from 'components/SkeletonPost/SkeletonPost';\n\nexport const PostsList = ({ posts, isLoading }) => {\n  if (isLoading) {\n    return (\n      <Ul>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <Li key={index}>\n            <SkeletonPost key={index} />\n          </Li>\n        ))}\n      </Ul>\n    );\n  }\n\n  return (\n    <Ul>\n      {posts?.length > 0 ? (\n        posts.map(post => <PostItem key={post.messageId} postDetails={post} />)\n      ) : (\n        <h3>We didn't find any posts.</h3>\n      )}\n    </Ul>\n  );\n};\n","import { Section } from 'components/Section/Section';\nimport { useContext, useEffect, useState } from 'react';\nimport { getNewsFeed } from 'api/mockAPI';\nimport { PostsList } from 'components/PostsList/PostsList';\nimport { useSearchParams } from 'react-router-dom';\nimport LoadingSpinner from 'components/LoadingSpinner/LoadingSpinner';\nimport { PostsContext } from 'Layout/Layout';\n\nconst Posts = ({ authorId }) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { setTotalPosts } = useContext(PostsContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [curPage] = useState(parseSearch('_page', 1));\n  const [postsPerPage] = useState(parseSearch('_limit', 5));\n\n  function parseSearch(searchParam, defaultValue) {\n    return parseInt(searchParams.get(searchParam), 10) || defaultValue;\n  }\n\n  useEffect(() => {\n    // Пагинация\n    if (!searchParams.has('_page') || !searchParams.has('_limit')) {\n      const newSearchParams = new URLSearchParams(searchParams);\n      newSearchParams.set('_page', curPage);\n      newSearchParams.set('_limit', postsPerPage);\n      setSearchParams(newSearchParams, { replace: true });\n    }\n\n    setIsLoading(true);\n\n    const asyncWrapper = async () => {\n      try {\n        // Пагинация\n        const params = {\n          _page: curPage,\n          _limit: postsPerPage,\n        };\n\n        // Фильтрация\n        for (const [key, value] of searchParams.entries()) {\n          if (value) {\n            params[key] = value;\n          }\n        }\n\n        if (authorId) params.authorId = authorId;\n\n        const { data, headers } = await getNewsFeed(params);\n        setTotalPosts(headers['x-total-count']);\n        setPosts(data);\n      } catch (e) {\n        console.log(e.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    asyncWrapper();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [authorId, searchParams]);\n\n  return (\n    <>\n      {isLoading && <LoadingSpinner isLoading={isLoading} />}\n      <Section title=\"Posts\">\n        {<PostsList posts={posts} isLoading={isLoading} />}\n      </Section>\n    </>\n  );\n};\n\nexport default Posts;\n","import styled from 'styled-components';\n\nexport const BannerThumb = styled.div`\n  width: 100%;\n  height: 200px;\n  margin-bottom: 20px;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  object-position: center;\n`;\n\nexport const Text = styled.p`\n  margin-bottom: 12px;\n`;\n\nexport const AvatarThumb = styled.div`\n  width: 130px;\n  height: 130px;\n  border-radius: 10%;\n  overflow: hidden;\n  position: relative;\n  margin-top: -80px;\n  margin-left: 20px;\n  border: 5px solid black;\n`;\n\nexport const H2 = styled.h2`\n  margin-bottom: 12px;\n`;\n\nexport const DescriptionList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  margin-bottom: 12px;\n`;\n\nexport const DescriptionItem = styled.li`\n  display: flex;\n  gap: 4px;\n`;\n\nexport const FollowList = styled.ul`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const FollowDigit = styled.span`\n  font-weight: bold;\n`;\n","import { TfiLocationPin } from 'react-icons/tfi';\nimport { AiOutlineLink } from 'react-icons/ai';\nimport { BiCalendar } from 'react-icons/bi';\nimport {\n  DescriptionItem,\n  DescriptionList,\n  AvatarThumb,\n  BannerThumb,\n  FollowDigit,\n  FollowList,\n  H2,\n  Text,\n  Img,\n} from './ProfileDetails.styled';\nimport DateParser from 'utilities/dateParser';\nimport { Section } from 'components/Section/Section';\nimport defaultPhoto from 'images/img_not_found.jpg';\nimport PropTypes from 'prop-types';\nimport Posts from 'pages/Posts';\n\nconst ProfileDetails = ({\n  profileDetails: {\n    avatar,\n    banner,\n    city,\n    country,\n    description,\n    followers,\n    following,\n    registeredAt,\n    url,\n    username,\n    userId,\n  },\n}) => {\n  const { month, year } = DateParser(registeredAt);\n  const accoutAvatar = avatar ? avatar : defaultPhoto;\n  const accountBanner = banner ? banner : defaultPhoto;\n\n  return (\n    <>\n      <Section>\n        <h1>{username}</h1>\n        <Text>TotalMessages</Text>\n        <BannerThumb>\n          <Img src={accountBanner} alt=\"banner\" width={'600'} height={'200'} />\n        </BannerThumb>\n        <AvatarThumb>\n          <Img src={accoutAvatar} alt=\"avatar\" width={'40'} height={'40'} />\n        </AvatarThumb>\n        <H2>{username}</H2>\n        <Text>{description}</Text>\n        <DescriptionList>\n          <DescriptionItem>\n            <TfiLocationPin size={19} />\n            <p>\n              {country}, {city}\n            </p>\n          </DescriptionItem>\n          <DescriptionItem>\n            <AiOutlineLink size={19} />\n            <a href={url}>{url}</a>\n          </DescriptionItem>\n          <DescriptionItem>\n            <BiCalendar size={19} />\n            <p>\n              Joined {month} {year}\n            </p>\n          </DescriptionItem>\n        </DescriptionList>\n        <FollowList>\n          <li>\n            <FollowDigit>{following}</FollowDigit> Following\n          </li>\n          <li>\n            <FollowDigit>{followers}</FollowDigit> Followers\n          </li>\n        </FollowList>\n      </Section>\n      <Posts authorId={userId} />\n    </>\n  );\n};\n\nProfileDetails.propTypes = {\n  profileDetails: PropTypes.shape({\n    avatar: PropTypes.string.isRequired,\n    banner: PropTypes.string.isRequired,\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    followers: PropTypes.number.isRequired,\n    following: PropTypes.number.isRequired,\n    registeredAt: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    userId: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ProfileDetails;\n","import { useEffect, useState } from 'react';\nimport { Section } from 'components/Section/Section';\nimport { useParams } from 'react-router-dom';\nimport { getProfileDetails } from 'api/mockAPI';\nimport ProfileDetails from 'components/ProfileDetails/ProfileDetails';\nimport LoadingSpinner from 'components/LoadingSpinner/LoadingSpinner';\n\nconst Profile = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [profileDetails, setProfileDetails] = useState({});\n  const { userName } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const asyncWrapper = async () => {\n      try {\n        const profileDetails = await getProfileDetails(userName);\n        setProfileDetails(profileDetails);\n      } catch (e) {\n        console.log(e.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    asyncWrapper();\n  }, [userName]);\n\n  return (\n    <Section>\n      {isLoading && <LoadingSpinner isLoading={isLoading} />}\n      {profileDetails && Object.keys(profileDetails).length > 0 ? (\n        <ProfileDetails profileDetails={profileDetails} />\n      ) : (\n        <div>Oops!</div>\n      )}\n    </Section>\n  );\n};\n\nexport default Profile;\n","const monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst DateParser = createdAt => {\n  const date = new Date(createdAt);\n  const day = date.getDate(); // Возвращает день месяца от 1 до 31\n  const month = monthNames[date.getMonth()];\n  const year = date.getUTCFullYear(); // Возвращает год (4 цифры)\n  const hours = date.getUTCHours(); // Возвращает часы в UTC (от 0 до 23)\n  const minutes = date.getUTCMinutes().toString().padStart(2, '0'); // Возвращает минуты в UTC (от 0 до 59), добавляет ведущий ноль при необходимости\n  return { day, month, year, hours, minutes };\n};\n\nexport default DateParser;\n"],"names":["StyledSection","styled","section","_templateObject","_taggedTemplateLiteral","H1","h1","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","mobilePd","cssVar","tabletPd","desktopPd","UserName","h2","Li","li","AvatarBox","div","_templateObject3","Img","img","_templateObject4","MessageBox","_templateObject5","Message","p","_templateObject6","MessageImgBox","_templateObject7","MessageSplitter","_templateObject8","MessageTitle","_templateObject9","PostDate","createdAt","_DateParser","DateParser","day","month","hours","minutes","_Fragment","PostItem","_ref$postDetails","postDetails","author","avatar","image","message","location","useLocation","accoutAvatar","defaultPhoto","postImage","src","alt","width","height","Link","to","concat","state","from","Ul","ul","props","ContentLoader","_objectSpread","speed","viewBox","backgroundColor","foregroundColor","Mobile","cx","cy","r","x","y","rx","ry","Desktop","PostsList","posts","isLoading","Array","length","map","_","index","SkeletonPost","post","messageId","authorId","_useState","useState","_useState2","_slicedToArray","setPosts","_useState3","_useState4","setIsLoading","setTotalPosts","useContext","PostsContext","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState5","parseSearch","curPage","_useState7","postsPerPage","searchParam","defaultValue","parseInt","get","useEffect","has","newSearchParams","URLSearchParams","set","replace","asyncWrapper","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","_iterator","_step","_step$value","key","value","_yield$getNewsFeed","data","headers","wrap","_context","prev","next","_page","_limit","_createForOfIteratorHelper","entries","s","n","done","err","e","f","getNewsFeed","sent","t0","console","log","finish","stop","apply","arguments","LoadingSpinner","BannerThumb","Text","AvatarThumb","H2","DescriptionList","DescriptionItem","FollowList","FollowDigit","span","_ref$profileDetails","profileDetails","banner","city","country","description","followers","following","registeredAt","url","username","userId","year","accountBanner","TfiLocationPin","size","AiOutlineLink","href","BiCalendar","Posts","setProfileDetails","userName","useParams","_profileDetails","getProfileDetails","Object","keys","ProfileDetails","monthNames","date","Date","getDate","getMonth","getUTCFullYear","getUTCHours","getUTCMinutes","toString","padStart"],"sourceRoot":""}