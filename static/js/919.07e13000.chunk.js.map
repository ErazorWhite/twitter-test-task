{"version":3,"file":"static/js/919.07e13000.chunk.js","mappings":"0MAEMA,E,QAAUC,EAAMC,OAAO,CAC3BC,QAAS,iEAGEC,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAMC,GAAY,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAElBhB,EAAQiB,IAAI,SAAU,CAAEC,OAAQR,IAAgB,KAAD,EAA1D,OAA0DC,EAAAG,EAAAK,KAA9DP,EAAID,EAAJC,KAAIE,EAAAM,OAAA,SACLR,GAAI,OAAAE,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAEXQ,QAAQC,IAAIT,EAAAO,GAAEG,SAAS,yBAAAV,EAAAW,OAAA,GAAAhB,EAAA,kBAE1B,gBAPuBiB,GAAA,OAAArB,EAAAsB,MAAA,KAAAC,UAAA,KASXC,EAAiB,eAAAC,GAAAxB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuB,EAAMC,GAAE,IAAAC,EAAArB,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cAAAkB,EAAAnB,KAAA,EAAAmB,EAAAlB,KAAA,EAEdhB,EAAQiB,IAAI,UAADkB,OAAWH,IAAM,KAAD,EAAtC,OAAsCC,EAAAC,EAAAf,KAA1CP,EAAIqB,EAAJrB,KAAIsB,EAAAd,OAAA,SACLR,EAAK,IAAE,OAAAsB,EAAAnB,KAAA,EAAAmB,EAAAb,GAAAa,EAAA,SAEdZ,QAAQC,IAAIW,EAAAb,GAAEG,SAAS,yBAAAU,EAAAT,OAAA,GAAAM,EAAA,kBAE1B,gBAP6BK,GAAA,OAAAN,EAAAH,MAAA,KAAAC,UAAA,I,wHCZjBS,GAAuBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAoBE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iGAO3CC,EAAkBJ,EAAAA,GAAOK,IAAGC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sJ,SCLnCI,EAAS,WAAH,OACVC,EAAAA,EAAAA,KAACT,EAAoB,CACnBU,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,eAAe,UACfC,OAAO,OACPC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GACT,EAoBJ,EAjBuB,SAAHlD,GAAuB,IAAjBmD,EAASnD,EAATmD,UAClBC,EAAaC,SAASC,eAAe,gBAE3C,OACEH,GACAI,EAAAA,cACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,KACTlB,EAAAA,EAAAA,KAACJ,EAAe,CAAAqB,UACdjB,EAAAA,EAAAA,KAACD,EAAM,SAGXY,EAGN,C,4GC/BMQ,GAAWC,EAAAA,EAAAA,GAAO,oBAClBC,GAAWD,EAAAA,EAAAA,GAAO,oBAClBE,GAAYF,EAAAA,EAAAA,GAAO,qBAEZG,EAAW/B,EAAAA,GAAOgC,GAAE9B,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6BAIpB8B,EAAKjC,EAAAA,GAAOkC,GAAE5B,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,8TAEZwB,EACGA,EAQDE,EACGA,EAIHC,EACGA,GAIPK,EAAYnC,EAAAA,GAAOK,IAAG+B,IAAAA,GAAAjC,EAAAA,EAAAA,GAAA,gIAStBkC,EAAMrC,EAAAA,GAAOsC,IAAGC,IAAAA,GAAApC,EAAAA,EAAAA,GAAA,2CAKhBqC,EAAaxC,EAAAA,GAAOK,IAAGoC,IAAAA,GAAAtC,EAAAA,EAAAA,GAAA,2BAIvBuC,EAAU1C,EAAAA,GAAO2C,EAACC,IAAAA,GAAAzC,EAAAA,EAAAA,GAAA,kCAIlB0C,EAAgB7C,EAAAA,GAAOK,IAAGyC,IAAAA,GAAA3C,EAAAA,EAAAA,GAAA,iGAO1B4C,EAAkB/C,EAAAA,GAAOK,IAAG2C,IAAAA,GAAA7C,EAAAA,EAAAA,GAAA,0CAK5B8C,EAAejD,EAAAA,GAAOK,IAAG6C,IAAAA,GAAA/C,EAAAA,EAAAA,GAAA,iE,mBChEzBgD,EAAW,SAAHpF,GAAqB,IAAhBqF,EAASrF,EAATqF,UACxBC,GAAuCC,EAAAA,EAAAA,GAAWF,GAA1CG,EAAGF,EAAHE,IAAKC,EAAKH,EAALG,MAAOC,EAAKJ,EAALI,MAAOC,EAAOL,EAAPK,QAE3B,OACEnC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACG+B,EAAM,IAAED,MAEX/C,EAAAA,EAAAA,KAAA,QAAAiB,SAAM,UACNF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACGgC,EAAM,IAAEC,EAAQ,YAIzB,E,8BCDaC,EAAW,SAAH5F,GAEd,IAAD6F,EAAA7F,EADJ8F,YAAeC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAKJ,EAALI,MAAO9E,EAAO0E,EAAP1E,QAASkE,EAASQ,EAATR,UAEzCa,GAAWC,EAAAA,EAAAA,MACXC,EAAeJ,GAAkBK,EACjCC,EAAYL,GAAgBI,EAElC,OACE5D,EAAAA,EAAAA,KAACyB,EAAE,CAAAR,UACDF,EAAAA,EAAAA,MAACwB,EAAe,CAAAtB,SAAA,EACdjB,EAAAA,EAAAA,KAAC2B,EAAS,CAAAV,UACRjB,EAAAA,EAAAA,KAAC6B,EAAG,CAACiC,IAAKH,EAAcI,IAAI,UAAU7D,MAAO,KAAMD,OAAQ,UAE7Dc,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAC0B,EAAY,CAAAxB,SAAA,EACXjB,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CAACC,GAAE,YAAA5E,OAAciE,GAAUY,MAAO,CAAEC,KAAMV,GAAWxC,UACxDjB,EAAAA,EAAAA,KAACuB,EAAQ,CAAAN,SAAEqC,OAEbtD,EAAAA,EAAAA,KAAA,QAAAiB,SAAM,UACNjB,EAAAA,EAAAA,KAAC2C,EAAQ,CAACC,UAAWA,QAEvB7B,EAAAA,EAAAA,MAACiB,EAAU,CAAAf,SAAA,EACTjB,EAAAA,EAAAA,KAACkC,EAAO,CAAAjB,SAAEvC,KACVsB,EAAAA,EAAAA,KAACqC,EAAa,CAAApB,UACZjB,EAAAA,EAAAA,KAAC6B,EAAG,CACFiC,IAAKD,EACLE,IAAI,qBACJ7D,MAAO,MACPD,OAAQ,oBAQxB,ECjDamE,EAAK5E,EAAAA,GAAO6E,GAAE3E,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qECCd2E,EAAY,SAAH/G,GAAmB,IAAbgH,EAAKhH,EAALgH,MAC1B,OACEvE,EAAAA,EAAAA,KAACoE,EAAE,CAAAnD,SACAsD,GACCA,EAAMC,KAAI,SAAAC,GAAI,OAAIzE,EAAAA,EAAAA,KAACmD,EAAQ,CAAsBE,YAAaoB,GAA7BA,EAAKC,UAAgC,KAG9E,C,kFCRaC,EAAgBnF,EAAAA,GAAOoF,QAAOlF,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yDAK9BkF,EAAKrF,EAAAA,GAAOsF,GAAEhF,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,kC,SCJdoF,EAAU,SAAHxH,GAA6B,IAAvByH,EAAKzH,EAALyH,MAAO/D,EAAQ1D,EAAR0D,SAC/B,OACEF,EAAAA,EAAAA,MAAC4D,EAAa,CAAA1D,SAAA,CACX+D,IAAShF,EAAAA,EAAAA,KAAC6E,EAAE,CAAA5D,SAAE+D,KACfhF,EAAAA,EAAAA,KAAA,OAAAiB,SAAMA,MAGZ,C,+ICqCA,UAxCc,WACZ,IAAAgE,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BV,EAAKY,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAkCJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA1C5E,EAAS6E,EAAA,GAAEC,EAAYD,EAAA,GAC9BE,GAAuBC,EAAAA,EAAAA,MAAhB9H,GAAiCwH,EAAAA,EAAAA,GAAAK,EAAA,GAArB,GA2BnB,OAzBAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GAEb,IAAMI,EAAY,eAAArI,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAS,EAAAyH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAzI,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAF,EAAAC,KAAA,EAEXG,EAAS,CAAC,EAEhByH,GAAAM,EAAAA,EAAAA,GAC2BvI,EAAawI,WAAS,IAAjD,IAAAP,EAAAQ,MAAAP,EAAAD,EAAAS,KAAAC,MAAmDR,GAAAX,EAAAA,EAAAA,GAAAU,EAAAG,MAAA,GAAvCD,EAAGD,EAAA,IAAEE,EAAKF,EAAA,MAElB3H,EAAO4H,GAAOC,EAEjB,OAAAO,GAAAX,EAAAY,EAAAD,EAAA,SAAAX,EAAAa,GAAA,QAAA1I,EAAAE,KAAA,GAEmBZ,EAAAA,EAAAA,GAAYc,GAAQ,KAAD,EAAjCmG,EAAKvG,EAAAK,KACXgH,EAASd,GAAOvG,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAEhBQ,QAAQC,IAAIT,EAAAO,GAAEG,SAAS,QAEH,OAFGV,EAAAC,KAAA,GAEvBuH,GAAa,GAAOxH,EAAA2I,OAAA,6BAAA3I,EAAAW,OAAA,GAAAhB,EAAA,yBAEvB,kBAlBiB,OAAAJ,EAAAsB,MAAA,KAAAC,UAAA,KAmBlB8G,GACF,GAAG,CAAChI,KAGFmD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACWjB,EAAAA,EAAAA,KAAC4G,EAAAA,EAAc,CAAClG,UAAWA,KACpCV,EAAAA,EAAAA,KAAC+E,EAAAA,EAAO,CAACC,MAAM,QAAO/D,UACpBjB,EAAAA,EAAAA,KAACsE,EAAAA,EAAS,CAACC,MAAOA,QAI1B,C,qBC7CA,IAAMsC,EAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaF,IAVmB,SAAAjE,GACjB,IAAMkE,EAAO,IAAIC,KAAKnE,GAMtB,MAAO,CAAEG,IALG+D,EAAKE,UAKHhE,MAJA6D,EAAWC,EAAKG,YAITC,KAHRJ,EAAKK,iBAGSlE,MAFb6D,EAAKM,cAEelE,QADlB4D,EAAKO,gBAAgBC,WAAWC,SAAS,EAAG,KAE9D,C","sources":["api/mockAPI.js","components/LoadingSpinner/LoadingSpinner.styled.js","components/LoadingSpinner/LoadingSpinner.jsx","components/PostItem/PostItem.styled.js","components/PostDate/PostDate.jsx","components/PostItem/PostItem.jsx","components/PostsList/PostsList.styled.js","components/PostsList/PostsList.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","pages/Posts.jsx","utilities/dateParser.js"],"sourcesContent":["import axios from 'axios';\n\nconst mockAPI = axios.create({\n  baseURL: 'https://murmuring-spire-16258-e111b21c7a09.herokuapp.com/api',\n});\n\nexport const getNewsFeed = async searchParams => {\n  try {\n    const { data } = await mockAPI.get(`/posts`, { params: searchParams });\n    return data;\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n\nexport const getProfileDetails = async id => {\n  try {\n    const { data } = await mockAPI.get(`/users/${id}`);\n    return data[0];\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n","import { styled } from 'styled-components';\nimport { MutatingDots } from 'react-loader-spinner';\n\nexport const CenteredMutatingDots = styled(MutatingDots)`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Backdrop from 'components/Backdrop/Backdrop';\nimport { CenteredMutatingDots, LoaderContainer } from './LoadingSpinner.styled';\n\nconst Loader = () => (\n  <CenteredMutatingDots\n    height=\"100\"\n    width=\"100\"\n    color=\"#4fa94d\"\n    secondaryColor=\"#4fa94d\"\n    radius=\"12.5\"\n    ariaLabel=\"mutating-dots-loading\"\n    wrapperStyle={{}}\n    wrapperClass=\"\"\n    visible={true}\n  />\n);\n\nconst LoadingSpinner = ({ isLoading }) => {\n  const portalRoot = document.getElementById('loading-root');\n\n  return (\n    isLoading &&\n    ReactDOM.createPortal(\n      <>\n        <Backdrop />\n        <LoaderContainer>\n          <Loader />\n        </LoaderContainer>\n      </>,\n      portalRoot\n    )\n  );\n};\n\nexport default LoadingSpinner;\n","import { styled } from 'styled-components';\nimport cssVar from 'utilities/cssVarGetter';\n\nconst mobilePd = cssVar('--mobile-padding');\nconst tabletPd = cssVar('--tablet-padding');\nconst desktopPd = cssVar('--desktop-padding');\n\nexport const UserName = styled.h2`\n  font-size: 1em;\n`;\n\nexport const Li = styled.li`\n  position: relative;\n  margin: 0 -${mobilePd};\n  padding: 10px ${mobilePd};\n  border-bottom: 1px solid gray;\n\n  &:last-child {\n    border: none;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 -${tabletPd};\n    padding: 20px ${tabletPd};\n  }\n\n  @media (min-width: 1280px) {\n    margin: 0 -${desktopPd};\n    padding: 30px ${desktopPd};\n  }\n`;\n\nexport const AvatarBox = styled.div`\n  min-height: 40px;\n  height: 40px;\n  min-width: 40px;\n  width: 40px;\n  border-radius: 50%;\n  overflow: hidden;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const MessageBox = styled.div`\n  padding: 5px;\n`;\n\nexport const Message = styled.p`\n  margin-bottom: 15px;\n`;\n\nexport const MessageImgBox = styled.div`\n  max-width: 480px;\n  max-height: 640px;\n  border-radius: 10%;\n  overflow: hidden;\n`;\n\nexport const MessageSplitter = styled.div`\n  display: flex;\n  gap: 12px;\n`;\n\nexport const MessageTitle = styled.div`\n  display: flex;\n  gap: 4px;\n  margin-bottom: 10px;\n`;\n","import DateParser from \"utilities/dateParser\";\n\nexport const PostDate = ({createdAt}) => {\n  const { day, month, hours, minutes } = DateParser(createdAt);\n\n  return (\n    <>\n      <p>\n        {month} {day}\n      </p>\n      <span>Â·</span>\n      <p>\n        {hours}:{minutes} UTC\n      </p>\n    </>\n  );\n};\n","import {\n  UserName,\n  AvatarBox,\n  Message,\n  MessageSplitter,\n  Img,\n  MessageBox,\n  MessageTitle,\n  MessageImgBox,\n  Li,\n} from './PostItem.styled';\nimport { PostDate } from 'components/PostDate/PostDate';\nimport { Link, useLocation } from 'react-router-dom';\nimport defaultPhoto from 'images/img_not_found.jpg';\n\nexport const PostItem = ({\n  postDetails: { author, avatar, image, message, createdAt },\n}) => {\n  const location = useLocation();\n  const accoutAvatar = avatar ? avatar : defaultPhoto;\n  const postImage = image ? image : defaultPhoto;\n\n  return (\n    <Li>\n      <MessageSplitter>\n        <AvatarBox>\n          <Img src={accoutAvatar} alt=\"profile\" width={'40'} height={'40'} />\n        </AvatarBox>\n        <div>\n          <MessageTitle>\n            <Link to={`/profile/${author}`} state={{ from: location }}>\n              <UserName>{author}</UserName>\n            </Link>\n            <span>Â·</span>\n            <PostDate createdAt={createdAt} />\n          </MessageTitle>\n          <MessageBox>\n            <Message>{message}</Message>\n            <MessageImgBox>\n              <Img\n                src={postImage}\n                alt=\"post visualization\"\n                width={'480'}\n                height={'640'}\n              />\n            </MessageImgBox>\n          </MessageBox>\n        </div>\n      </MessageSplitter>\n    </Li>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n","import { PostItem } from 'components/PostItem/PostItem';\nimport { Ul } from './PostsList.styled';\n\nexport const PostsList = ({ posts }) => {\n  return (\n    <Ul>\n      {posts &&\n        posts.map(post => <PostItem key={post.messageId} postDetails={post} />)}\n    </Ul>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const StyledSection = styled.section`\n  padding-top: 14px;\n  padding-bottom: 20px;\n`;\n\nexport const H1 = styled.h1`\n  margin-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { StyledSection, H1 } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <StyledSection>\n      {title && <H1>{title}</H1>}\n      <div>{children}</div>\n    </StyledSection>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n","import { Section } from 'components/Section/Section';\nimport { useEffect, useState } from 'react';\nimport { getNewsFeed } from 'api/mockAPI';\nimport { PostsList } from 'components/PostsList/PostsList';\nimport { useSearchParams } from 'react-router-dom';\nimport LoadingSpinner from 'components/LoadingSpinner/LoadingSpinner';\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const asyncWrapper = async () => {\n      try {\n        const params = {};\n\n        // Ð¤Ð¸Ð»ÑÑÑÐ°ÑÐ¸Ñ\n        for (const [key, value] of searchParams.entries()) {\n          if (value) {\n            params[key] = value;\n          }\n        }\n\n        const posts = await getNewsFeed(params);\n        setPosts(posts);\n      } catch (e) {\n        console.log(e.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    asyncWrapper();\n  }, [searchParams]);\n\n  return (\n    <>\n      {true && <LoadingSpinner isLoading={isLoading} />}\n      <Section title=\"Posts\">\n        <PostsList posts={posts} />\n      </Section>\n    </>\n  );\n};\n\nexport default Posts;\n","const monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst DateParser = createdAt => {\n  const date = new Date(createdAt);\n  const day = date.getDate(); // ÐÐ¾Ð·Ð²ÑÐ°ÑÐ°ÐµÑ Ð´ÐµÐ½Ñ Ð¼ÐµÑÑÑÐ° Ð¾Ñ 1 Ð´Ð¾ 31\n  const month = monthNames[date.getMonth()];\n  const year = date.getUTCFullYear(); // ÐÐ¾Ð·Ð²ÑÐ°ÑÐ°ÐµÑ Ð³Ð¾Ð´ (4 ÑÐ¸ÑÑÑ)\n  const hours = date.getUTCHours(); // ÐÐ¾Ð·Ð²ÑÐ°ÑÐ°ÐµÑ ÑÐ°ÑÑ Ð² UTC (Ð¾Ñ 0 Ð´Ð¾ 23)\n  const minutes = date.getUTCMinutes().toString().padStart(2, '0'); // ÐÐ¾Ð·Ð²ÑÐ°ÑÐ°ÐµÑ Ð¼Ð¸Ð½ÑÑÑ Ð² UTC (Ð¾Ñ 0 Ð´Ð¾ 59), Ð´Ð¾Ð±Ð°Ð²Ð»ÑÐµÑ Ð²ÐµÐ´ÑÑÐ¸Ð¹ Ð½Ð¾Ð»Ñ Ð¿ÑÐ¸ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ÑÑÐ¸\n  return { day, month, year, hours, minutes };\n};\n\nexport default DateParser;\n"],"names":["mockAPI","axios","create","baseURL","getNewsFeed","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","searchParams","_yield$mockAPI$get","data","wrap","_context","prev","next","get","params","sent","abrupt","t0","console","log","message","stop","_x","apply","arguments","getProfileDetails","_ref2","_callee2","id","_yield$mockAPI$get2","_context2","concat","_x2","CenteredMutatingDots","styled","MutatingDots","_templateObject","_taggedTemplateLiteral","LoaderContainer","div","_templateObject2","Loader","_jsx","height","width","color","secondaryColor","radius","ariaLabel","wrapperStyle","wrapperClass","visible","isLoading","portalRoot","document","getElementById","ReactDOM","_jsxs","_Fragment","children","Backdrop","mobilePd","cssVar","tabletPd","desktopPd","UserName","h2","Li","li","AvatarBox","_templateObject3","Img","img","_templateObject4","MessageBox","_templateObject5","Message","p","_templateObject6","MessageImgBox","_templateObject7","MessageSplitter","_templateObject8","MessageTitle","_templateObject9","PostDate","createdAt","_DateParser","DateParser","day","month","hours","minutes","PostItem","_ref$postDetails","postDetails","author","avatar","image","location","useLocation","accoutAvatar","defaultPhoto","postImage","src","alt","Link","to","state","from","Ul","ul","PostsList","posts","map","post","messageId","StyledSection","section","H1","h1","Section","title","_useState","useState","_useState2","_slicedToArray","setPosts","_useState3","_useState4","setIsLoading","_useSearchParams","useSearchParams","useEffect","asyncWrapper","_iterator","_step","_step$value","key","value","_posts","_createForOfIteratorHelper","entries","s","n","done","err","e","f","finish","LoadingSpinner","monthNames","date","Date","getDate","getMonth","year","getUTCFullYear","getUTCHours","getUTCMinutes","toString","padStart"],"sourceRoot":""}